package com.jumper.hospital.draw;
/**
 * 省妇幼胎心胎心报告胎心曲线图画图接口
 * @author rent
 * @date 2016-04-14 14:55
 */
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import com.itextpdf.text.PageSize;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.AsianFontMapper;
import com.itextpdf.text.pdf.FontMapper;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.draw.DrawInterface;
import com.jumper.hospital.utils.TimeUtils;

public class SFYPdfDrawInterface implements DrawInterface {
	
	/** 总宽度，13.5分钟的曲线在72DPI环境下宽度为765.46 **/
	private static float total_width = 796.5f;
	/** 垂直每一格所代表的像素点**/
	private static float vertical_size = 11f;
	/** 左边距38个点 **/
	private static int margin_left = 23;
	/** 上边距100个点 **/
	private static int margin_top = 230;
	/** 正常区域颜色 **/
	private static Color normal_color = new Color(162, 162, 162, 100);
	/** 黑色 **/
	private static Color black_color = new Color(0, 0, 0, 255);
	/** 浅黑色 **/
	private static Color light_black_color = new Color(90, 90, 90);
	/** Y轴坐标值总量 **/
	private static int y_label_count = 200;
	/** 宫缩Y轴总刻度 **/
	private static int uterus_count = 100;
	
	/** 胎心曲线数据 **/
	protected static int[] dataArray = {136,135,132,128,127,127,128,130,132,135,136,138,140,141,142,141,140,139,138,136,135,135,133,132,131,131,131,131,133,136,138,138,138,138,136,135,133,131,131,130,129,131,133,135,136,137,138,138,138,137,136,134,131,129,128,128,127,125,126,126,126,128,132,137,137,140,140,141,141,140,139,138,135,132,130,128,125,124,124,123,123,123,122,122,124,123,124,124,125,128,130,132,133,134,136,138,141,143,142,142,140,135,132,131,131,130,127,125,125,124,124,124,124,126,125,126,127,134,136,138,138,139,139,139,138,134,132,131,130,128,127,125,125,125,125,125,124,124,124,125,125,126,127,128,130,130,130,131,132,133,135,136,136,138,137,138,137,136,135,135,135,135,134,132,131,130,128,126,127,127,127,127,126,125,125,127,131,133,136,136,137,137,136,136,131,127,127,127,128,129,130,130,130,130,128,128,129,131,132,134,136,138,140,141,142,145,145,146,147,147,147,147,147,147,148,147,146,147,147,148,149,149,149,151,151,151,151,151,152,152,151,152,152,152,152,0,0,0,0,0,148,147,148,147,147,145,146,145,145,145,145,146,144,143,143,140,136,135,136,136,136,136,131,131,131,131,131,132,132,133,135,135,137,138,136,136,136,134,134,130,131,131,132,132,132,133,131,132,132,132,134,138,139,137,137,136,131,127,127,127,127,129,133,134,134,134,133,133,132,131,132,132,132,133,133,133,132,132,133,133,135,136,138,138,138,138,139,140,141,140,134,134,131,128,128,127,127,127,129,129,127,127,128,128,128,136,136,137,137,143,143,144,144,145,145,146,145,144,144,142,136,128,128,127,124,124,124,124,125,126,128,128,128,128,126,126,126,130,130,130,132,132,133,135,138,138,140,141,141,141,141,139,133,128,127,127,128,130,130,133,133,133,133,131,130,128,128,126,128,128,132,136,138,138,138,140,139,140,140,135,132,131,131,129,129,129,128,128,129,129,132,134,134,135,139,140,141,141,142,143,144,144,145,147,148,148,148,149,147,147,141,140,140,136,134,133,133,133,129,127,127,127,128,129,126,127,127,128,128,135,137,138,140,141,142,142,142,143,142,142,142,141,142,142,142,143,142,143,143,137,136,133,131,125,124,124,126,126,127,126,127,131,133,137,136,138,139,140,141,141,138,138,134,131,130,130,130,128,127,127,130,132,134,135,136,137,138,138,137,135,133,132,130,128,128,128,130,130,131,133,136,137,137,137,137,137,135,135,132,130,130,130,130,131,132,135,136,137,138,138,139,140,138,138,136,135,135,131,126,126,127,129,131,130,131,132,133,134,134,133,133,132,135,138,138,138,139,139,140,141,137,135,135,132,129,129,127,127,127,127,131,132,131,131,131,132,135,136,137,138,138,139,140,141,142,143,143,143,144,145,146,146,146,146,146,145,143,142,139,140,142,141,141,141,139,139,141,139,142,142,141,143,147,147,147,146,145,144,144,144,144,144,145,144,143,141,137,135,134,133,136,138,138,138,137,136,134,133,132,131,127,126,125,124,123,124,127,130,132,132,132,132,133,133,132,132,130,128,128,127,128,128,128,130,131,131,131,130,130,129,129,129,129,130,131,132,134,135,136,137,138,141,140,138,138,134,131,131,133,137,137,137,137,137,137,136,135,137,138,139,139,140,141,143,145,145,145,146,145,144,143,142,143,142,141,140,139,138,137,134,132,131,129,129,131,135,139,138,139,139,139,140,140,140,140,140,139,139,138,138,140,140,141,141,141,141,142,143,143,145,147,147,148,149,149,149,149,148,148,148,147,147,145,143,143,141,141,140,136,136,136,138,139,139,139,137,136,137,137,136,136,135,135,138,138,139,139,138,138,136,137,137,138,137,135,135,133,137,137,139,138,139,139,138,138,137,136,134,133,132,133,136,138,138,141,142,144,144,146,148,149,150,151,151,151,150,149,149,149,149,149,151,152,152,153,153,153,154,154,154,154,155,156,156,158,156,156,155,153,148,145,144,144,143,141,140,139,140,139,140,143,143,144,145,145,145,144,142,140,139,136,135,133,132,132,132,132,131,133,136,136,136,135,133,131,129,127,129,129,129,128,130,129,131,134,132,133,136,138,139,139,140,141,143,144,144,144,143,142,142,141,141,138,138,137,138,138,138,137,136,135,136,139,142,141,142,142,141,141,139,139,137,135,137,138,138,141,141,143,144,144,145,146,146,146,146,144,143,141,138,136,133,132,133,133,133,133,134,135,136,136,137,138,140,138,138,137,136,137,137,140,140,140,140,137,135,134,134,133,132,132,133,134,136,136,137,140,141,142,142,142,141,139,138,137,132,133,132,133,132,133,133,132,133,133,134,134,136,139,139,140,140,141,141,139,138,137,137,134,135,135,136,135,135,135,133,133,134,135,137,140,141,141,141,141,142,141,140,139,138,137,136,135,134,134,135,136,137,137,137,136,134,131,131,132,133,135,134,134,134,134,134,136,139,139,139,140,140,140,141,141,141,140,138,136,136,137,137,138,138,140,141,141,140,140,139,136,136,136,133,134,136,137,138,138,137,137,135,134,134,134,136,136,137,137,138,138,138,137,136,134,132,131,133,133,132,131,131,132,132,133,133,132,132,132,132,135,136,135,135,134,134,133,132,131,131,132,132,133,133,133,133,133,133,132,132,133,131,133,133,134,135,134,134,133,131,130,131,133,133,132,134,136,136,136,136,132,130,130,131,135,134,134,135,135,136,135,134,134,134,136,136,137,136,137,138,138,139,142,143,143,144,144,147,148,148,148,149,149,149,149,150,151,152,152,153,153,153,153,154,153,153,153,152,152,151,149,148,146,143,139,140,141,141,141,141,135,134,134,132,133,132,130,132,127,129,131,132,133,134,133,132,130,128,127,125,127,128,129,128,128,127,128,130,132,131,131,131,131,132,134,134,134,133,133,133,132,132,132,134,134,133,133,129,128,127,126,128,129,130,130,129,127,126,125,127,130,131,135,134,135,135,135,133,133,135,135,136,135,134,133,130,133,134,138,140,139,139,138,136,136,136,136,135,134,132,128,124,124,125,126,132,131,134,132,132,131,129,128,130,134,135,137,137,141,140,141,142,141,143,146,146,146,146,145,145,144,143,142,141,140,139,137,132,127,126,126,126,127,126,126,128,131,134,132,131,131,131,134,133,134,135,136,137,137,137,137,138,138,138,137,136,135,133,132,130,128,127,127,126,127,127,128,129,131,133,134,134,135,135,136,136,136,137,138,138,139,138,137,136,135,134,135,135,133,132,132,130,128,128,125,127,124,126,130,132,131,132,135,134,134,134,132,132,130,128,127,126,122,120,121,121,125,127,126,126,125,125,126,127,126,126,128,129,131,131,131,132,132,133,132,133,133,133,133,134,134,134,133,133,132,132,129,126,125,126,130,132,133,134,134,135,136,136,137,136,137,136,134,135,134,133,133,132,131,130,129,130,131,132,132,131,131,131,132,133,135,136,136,136,135,134,134,133,134,135,136,137,138,139,141,142,143,143,144,147,148,148,149,148,150,150,150,151,150,150,150,151,151,151,151,152,152,152,152,150,151,150,149,149,149,150,150,150,151,150,148,147,146,145,144,142,141,140,139,138,132,127,125,125,128,130,135,137,138,140,140,141,142,143,144,144,144,144,142,141,139,136,134,132,129,127,125,124,124,123,122,121,121,121,123,122,122,123,122,122,123,122,124,130,126,128,129,129,130,130,127,127,126,126,123,122,123,121,123,127,128,129,129,129,132,135,136,135,135,134,133,136,135,136,136,134,134,132,131,128,124,124,123,126,129,129,130,130,129,129,126,125,125,124,125,124,126,126,129,133,130,130,130,129,122,124,122,121,121,121,123,128,131,133,135,135,134,133,132,132,132,132,131,130,130,129,130,130,129,127,126,126,127,127,129,134,135,135,136,137,138,138,139,138,137,137,135,137,137,137,137,137,137,138,137,138,138,138,138,138,137,138,139,138,138,137,136,136,136,135,133,128,130,129,132,134,134,134,133,131,131,127,130,131,130,132,131,130,131,130,130,130,127,127,127,125,126,131,134,134,136,136,137,138,138,137,137,136,134,135,127,127,125,126,124,123,121,121,121,121,123,127,133,136,138,139,139,140,142,141,140,139,138,136,135,135,135,133,129,129,132,131,131,133,130,129,129,129,128,131,131,127,125,124,124,125,127,130,130,130,132,134,134,136,133,131,131,129,129,127,127,131,130,130,130,126,125,126,126,127,131,134,134,136,136,137,139,139,143,143,142,143,140,140,140,138,137,137,135,138,135,135,138,135,137,137,135,133,131,131,130,136,136,137,139,141,141,142,143,145,145,145,146,147,147,147,148,150,150,150,150,152,152,152,152,152,152,151,152,152,152,152,153,153,154,154,154,154,154,153,155,155,156,155,155,155,155,153,148,148,143,138,135,135,133,130,122,123,123,131,130,130,130,127,121,120,120,122,123,123,128,136,137,136,136,136,134,134,129,130,130,130,131,132,130,130,130,128,127,127,125,124,124,124,124,125,124,124,124,124,126,127,126,126,126,126,123,122,121,121,122,123,127,127,129,131,131,131,134,135,135,135,134,133,132,130,128,126,126,121,121,122,123,124,128,134,135,136,135,135,135,129,122,121,122,122,122,123,123,125,126,125,125,124,126,130,131,132,131,131,132,132,135,134,136,136,137,138,138,139,138,136,130,125,125,127,132,136,136,136,137,137,139,141,141,141,141,141,141,140,140,138,138,137,132,126,126,126,126,124,128,128,127,131,134,135,136,138,139,141,142,141,142,141,140,140,140,139,139,137,134,134,137,137,137,138,137,139,140,141,140,140,138,141,138,136,134,132,131,133,134,132,133,129,127,130,131,132,131,129,127,126,126,128,132,132,133,134,133,134,131,131,130,129,130,128,130,133,135,134,135,136,137,138,139,137,134,136,134,134,130,128,128,128,129,129,127,126,126,127,129,127,129,131,126,130,130,130,129,128,125,123,125,126,126,127,129,131,130,133,132,133,134,135,135,135,135,130,124,122,122,121,120,118,117,116,115,117,120,120,118,122,124,125,126,129,132,132,131,131,129,126,128,126,125,127,129,131,133,133,135,135,135,136,136,137,139,139,140,141,143,144,144,143,143,142,142,141,141,139,136,134,133,133,131,125,129,132,133,133,131,126,130,131,132,131,129,131,129,125,122,121,122,121,124,129,130,133,135,136,138,139,140,137,137,135,134,130,127,126,126,124,124,123,125,130,135,135,129,129,128,130,128,129,130,133,136,136,138,139,140,142,143,147,146,146,147,146,149,149,148,147,144,142,139,140,139,139,142,142,143,143,144,143,143,142,141,140,137,136,134,137,138,139,141,141,143,145,145,147,147,148,148,148,149,150,151,151,151,152,152,152,152,153,155,154,154,154,154,155,156,155,156,156,156,157,155,156,156,155,155,155,157,156,155,155,155,155,156,156,156,156,155,156,156,154,154,153,153,154,153,154,154,154,154,152,148,147,147,147,147,146,144,143,143,143,141,143,141,140,140,138,139,140,139,138,138,138,138,138,138,138,138,139,140,141,140,139,138,138,137,134,135,134,136,138,139,140,141,141,141,141,141,140,138,139,139,140,141,141,142,143,144,144,143,142,140,139,137,133,132,132,136,136,137,136,134,133,133,132,131,131,131,131,133,136,137,137,136,140,140,140,140,140,140,140,142,141,142,141,141,142,141,143,144,145,145,146,147,146,146,146,145,146,147,147,149,149,149,150,150,149,150,149,149,150,150,149,149,148,148,148,147,147,147,146,146,144,145,145,145,146,146,146,146,146,146,146,146,144,143,142,140,138,136,134,136,138,139,141,141,142,142,142,141,143,142,143,144,142,144,143,144,144,141,140,138,137,137,136,138,139,138,138,139,138,139,139,137,136,133,130,128,126,128,128,130,129,130,130,132,135,136,138,139,139,141,142,143,144,144,146,147,148,147,146,146,143,137,138,139,141,141,143,143,142,143,142,142,142,139,136,137,138,138,141,141,140,140,138,134,129,130,129,130,133,133,136,135,136,136,137,137,138,137,136,136,134,130,131,128,129,127,129,136,135,136,137,137,139,138,140,140,140,140,140,142,142,143,143,144,146,147,146,145,142,141,141,140,139,139,140,142,142,141,141,141,142,144,144,145,145,147,146,145,145,142,139,141,142,142,143,142,142,141,140,139,136,133,134,136,139,140,141,141,142,142,141,141,140,139,135,131,128,127,129,136,137,137,137,137,136,135,133,129,127,130,133,137,138,140,141,141,141,141,140,133,131,130,131,130,128,126,126,127,128,130,131,131,133,135,136,137,136,136,136,137,137,136,134,134,136,137,138,138,139,139,139,139,139,140,139,139,139,135,134,131,130,130,128,132,131,132,132,132,130,132,132,134,141,142,142,142,142,142,143,142,143,141,142,142,142,144,145,146,147,147,146,145,143,141,139,137,136,137,137,137,136,136,140,139,140,140,141,145,144,143,144,143,144,144,143,144,143,144,143,142,142,140,137,135,135,134,133,132,132,131,129,125,126,128,130,132,137,137,138,139,139,141,141,139,138,138,136,135,132,130,129,130,132,130,131,130,127,128,129,132,135,137,137,137,137,137,138,143,144,144,144,144,145,144,142,141,141,140,139,140,138,138,138,134,135,136,137,139,139,140,139,139,138,132,126,126,130,133,133,132,132,131,130,131,130,129,131,132,132,134,134,133,133,132,134,134,134,134,133,132,131,131,131,131,131,133,134,135,136,136,135,136,133,133,133,132,132,133,132,132,131,129,127,128,132,132,132,132,132,134,135,136,136,136,136,136,135,132,135,134,136,138,140,142,142,143,144,144,144,144,143,138,135,134,133,132,130,130,132,131,134,130,132,133,132,133,133,134,136,135,136,135,135,135,134,134,135,135,135,135,131,130,126,130,131,133,135,136,136,136,136,138,140,142,143,144,145,145,146,146,147,147,148,148,148,148,148,148,148,148,148,147,147,146,145,145,144,143,143,143,143,143,142,141,139,138,137,134,131,133,132,131,134,134,133,133,133,132,133,130,131,130,129,131,129,130,130,130,130,130,132,135,134,135,136,136,137,137,137,137,137,137,136,135,134,132,131,133,137,137,138,138,140,141,141,141,139,135,131,134,133,136,137,139,139,139,139,138,139,138,140,140,141,142,143,144,143,143,142,141,140,137,134,132,131,135,137,137,138,138,139,139,139,139,139,140,141,140,140,137,133,126,128,129,130,131,127,122,124,125,122,120,119,121,122,123,124,124,125,127,129,130,130,130,132,132,131,131,130,128,127,125,128,124,121,122,122,121,120,122,122,122,123,122,123,121,119,118,118,117,119,125,131,133,133,137,135,134,134,129,125,121,123,127,127,127,127,126,124,123,122,121,123,128,134,138,142,143,145,145,148,149,149,151,150,151,152,151,151,151,149,148,146,144,142,141,139,139,139,139,141,142,143,144,144,144,144,145,144,145,145,146,146,145,143,142,141,141,138,136,135,135,136,139,142,141,141,137,137,140,142,141,140,140,140,140,141,140,141,141,137,141,144,144,145,146,146,145,147,145,147,147,147,147,147,147,147,146,144,141,139,139,139,139,138,136,135,135,134,137,138,138,138,138,138,140,140,143,143,143,145,147,147,148,150,150,150,150,148,147,146,144,143,143,143,143,142,142,142,142,143,144,144,144,144,142,142,141,143,144,144,145,147,147,148,149,150,150,148,145,142,142,139,136,134,134,133,133,132,132,133,135,136,136,137,138,138,138,141,146,146,146,147,150,150,150,151,154,153,153,153,153,154,154,153,152,152,152,152,153,152,152,153,156,155,155,159,158,158,158,158,159,160,160,161,160,160,162,161,159,159,161,158,157,157,156,152,151,151,151,151,150,150,151,151,151,151,152,152,153,153,153,153,153,153,153,153,151,151,142,140,138,138,130,129,130,130,131,131,131,133,130,131,131,130,134,133,133,131,130,129,129,129,129,129,129,130,130,129,130,129,129,129,129,124,127,127,126,127,124,126,126,128,130,131,131,130,128,128,128,129,131,133,135,135,134,134,136,136,137,137,137,138,139,139,136,136,134,130,127,127,127,127,127,131,134,134,137,138,138,138,138,137,135,134,133,130,128,128,129,130,130,130,129,132,137,136,138,137,135,135,131,133,133,133,134,135,136,138,139,141,141,141,141,140,141,141,139,137,136,133,131,131,132,132,133,131,130,130,126,124,125,127,129,130,127,125,127,127,129,130,127,126,124,124,123,121,124,123,125,130,132,131,131,130,127,125,121,121,117,119,124,131,131,133,136,135,138,136,135,133,131,125,127,129,132,132,134,136,131,128,128,128,128,130,130,131,133,134,134,135,136,134,133,133,129,131,135,132,133,134,133,134,135,134,136,136,136,137,135,136,135,134,134};
	
	protected static int[] uterusArray = {8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,7,5,8,7,4,5,5,6,8,7,5,10,9,2,6,4,5,15,10,5,6,7,9,4,6,10,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,7,5,8,7,4,5,5,6,8,7,5,10,9,2,6,4,5,15,10,5,6,7,9,4,6,10,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,7,5,8,7,4,5,5,6,8,7,5,10,9,2,6,4,5,15,10,5,6,7,9,4,6,10,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,7,5,8,7,4,5,5,6,8,7,5,10,9,2,6,4,5,15,10,5,6,7,9,4,6,10,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,7,5,8,7,4,5,5,6,8,7,5,10,9,2,6,4,5,15,10,5,6,7,9,4,6,10,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,9,12,10,6,11,10,14,13,7,10,20,18,16,14,19,22,23,9,16,11,25,23,15,14,8,7,5,8,7,4,5,5,6,8,7,5,10,9,2,6,4,5,15,10,5,6,7,9,4,6,10};
	/** 页码，1、2 **/
	protected static int page;
	/** 胎动数据 **/
	protected static int[] fetalMoveArray = {99, 114, 777, 792, 962, 1199, 1729};
	/** 走纸速度，类型有(1,2,3,20,30) **/
	protected static int paperSpeed;
	/** 开始时间，用于计算胎动数据X点 **/
	protected static int start;
	/** 结束位置 **/
	protected static int end;
	/** 假定一个测试开始时间 **/
	protected static Timestamp testTime = TimeUtils.getCurrentTime();
	
	@SuppressWarnings("static-access")
	public SFYPdfDrawInterface(Integer margin_top, Integer page, int[] dataArray, int[] uterusArray, Integer paperSpeed, Integer start, Integer end, Timestamp testTime, int[] fetalMoveArray){
		this.margin_top = margin_top;
		this.page = page;
		this.dataArray = dataArray;
		this.uterusArray = uterusArray;
		this.paperSpeed = paperSpeed;
		this.start = start;
		this.end = end;
		this.testTime = testTime;
		this.fetalMoveArray = fetalMoveArray;
	}
	
	public SFYPdfDrawInterface(){
		
	}
	
	@Override
	public void draw(PdfContentByte canvas, float left, float bottom, float right, float top, float oy) {
		/** 设置画布区域大小，这里设置为A4纸张的大小 **/
		Rectangle rect = PageSize.A4.rotate();
		/** 设置画图字体支持中文 **/
		FontMapper fm = new AsianFontMapper(AsianFontMapper.ChineseSimplifiedFont, AsianFontMapper.ChineseSimplifiedEncoding_H);
		Graphics2D graph = canvas.createGraphics(rect.getWidth() - 20, rect.getHeight(), fm);
		/** 去掉线条毛边 **/
		graph.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		
		DrawParam param = null;
		switch (paperSpeed) {
			case 1:
				param = new DrawParam(17, 27, 29.5f, 1, page);
				break;
			case 2:
				param = new DrawParam(17, 27, 29.5f, 2, page);
				break;
			case 3:
				param = new DrawParam(17, 27, 29.5f, 3, page);
				break;
			case 20:
				param = new DrawParam(17, 40, 19.91f, 20, page);
				break;
			case 30:
				param = new DrawParam(17, 30, 26.55f, 30, page);
				break;
			default:
				break;
		}
		
		drawFetalHeartXLine(graph, margin_top, param);
		drawFetalHeartYLine(graph, margin_top, param);
		drawFetalHeartXLabel(graph, margin_top, param);
		drawFetalHeartYLabel(graph, margin_top, param);
		randerNormalArea(graph, margin_top);
		randerValue(graph, page, margin_top, param);
		randerFetalMoveData(graph, page, margin_top, fetalMoveArray, param);
		
		/** 宫缩的图 **/
		drawUterusXLine(graph, margin_top + 197 + 2);
		drawUterusYLine(graph, margin_top + 197 + 2, param);
		drawUterusYLabel(graph, margin_top + 197 + 2, param);
		randerUterusValue(graph, margin_top + 197 + 2, param);
	}
	
	/**
	 * 画X轴
	 * @param graph 画布对象
	 * @param marginTop 绝对定位的上边距
	 */
	protected void drawFetalHeartXLine(Graphics2D graph, Integer marginTop, DrawParam param){
		for(int i = 0; i < param.v_point; i++){
			int offset_y = (int) (marginTop + Math.ceil(vertical_size * i));
			/*if(i % 2 == 0){
				 graph.setStroke(new BasicStroke(0.5f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0, new float[]{4, 2}, 0));
			}else{
				graph.setStroke(new BasicStroke(0.5f));
			}*/
			graph.setStroke(new BasicStroke(0.4f));
			graph.setColor(light_black_color);
			graph.drawLine(margin_left, offset_y, (int)Math.ceil(total_width + margin_left - 0.5), offset_y);
		}
	}
	
	/**
	 * 画Y轴
	 * @param graph
	 * @param marginTop 绝对定位的上边距
	 */
	protected static void drawFetalHeartYLine(Graphics2D graph, Integer marginTop, DrawParam param){
		for(int j = 0; j <= param.h_point; j++){
			int offset_x = (int) (margin_left + Math.round(param.h_each_size * j));
			graph.setStroke(new BasicStroke(0.4f));
			graph.drawLine(offset_x, marginTop + 1, offset_x, (int) (marginTop + Math.ceil(vertical_size * (param.v_point - 1)) - 1));
			graph.setColor(light_black_color);
		}
	}

	/**
	 * 计算时间，这里提出来
	 * @param time 测试开始的时间
	 * @param start 生成报告截取的偏移量
	 * @param next 往后多长时间 单位秒
	 * @return
	 */
	protected static String getTime(Timestamp time, Integer start){
		if(time == null){
			return "";
		}
		Calendar c = Calendar.getInstance();
		c.setTime(time);
		c.add(Calendar.SECOND, start);
		
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		return format.format(c.getTime());
	}
	
	/**
	 * X轴坐标
	 * @param graph
	 * @param marginTop 绝对定位的上边距
	 */
	protected static void drawFetalHeartXLabel(Graphics2D graph, Integer marginTop, DrawParam param){
		float x_label_top = marginTop + vertical_size * param.v_point + 3;
		for(int o = 0; o <= param.h_point; o++){
			float offset_x = margin_left + param.h_each_size * o - 1.5f;
			graph.setFont(new java.awt.Font("宋体", java.awt.Font.PLAIN, 8));
			graph.setColor(Color.BLACK);
			switch (param.speed) {
				case 1: 
				case 2: 
				case 3: 
				case 30:
					if(o == 6 || o == 18){
						if(param.speed == 1){
							graph.drawString(o + param.h_point * (param.page - 1) +"分0秒", offset_x, x_label_top);
						}else if(param.speed == 2){
							int min = (int) (param.page % 2 == 0 ? o / 2 + 13 * (param.page - 1) : o / 2 + 13 * (param.page - 1) + (param.page - 1) * 0.5);
							int sec = param.page % 2 == 0 ? 30 : 0;
							graph.drawString(min + "分" + sec + "秒", offset_x, x_label_top);
						}else if(param.speed == 3){
							graph.drawString(o / 3 + (param.page - 1) * 9+"分0秒", offset_x, x_label_top);
						}else{
							graph.drawString(o + 30 * (param.page - 1) +"分0秒", offset_x, x_label_top);
						}
					}
					if(o % 12 == 0){
						int second = 0;
						if(param.speed == 1){
							second = (o + param.h_point * (param.page - 1)) * 60;
						}else if(param.speed == 2){
							second = (int) (o / 2 + 13.5 * (param.page - 1)) * 60;
						}else if(param.speed == 3){
							second = (o / 3 + (param.page - 1) * 9) * 60;
						}else{
							second = (o + 30 * (param.page - 1)) * 60;
						}
						graph.drawString("↑"+getTime(testTime, second + start), offset_x - 2, x_label_top);
					}
					break;
				case 20:
					/** 详细时间 **/
					if(o == 0 || o == 24){
						int second = (o / 2 + 20 * (param.page - 1)) * 60;
						graph.drawString("↑"+getTime(testTime, second + start), offset_x - 2, x_label_top);
					}
					/** 时间轴 **/
					if(o == 12 || o == 36){
						graph.drawString(o / 2 + 20 * (param.page - 1) +"分0秒", offset_x, x_label_top);
					}
					break;
				default: break;
			}
		}
	}
	
	/**
	 * Y轴坐标
	 * @param graph
	 * @param marginTop 绝对定位的上边距
	 */
	protected static void drawFetalHeartYLabel(Graphics2D graph, Integer marginTop, DrawParam param){
		for(int n = 1; n <= 2; n++){
			for(int k = 0; k < param.v_point; k++){
				if(k % 2 == 0 && k < param.v_point - 1){
					graph.setColor(Color.WHITE);
					switch (param.speed) {
						case 1: case 2: case 3: case 30:
							graph.fillRect((int)(margin_left + param.h_each_size * n * 6 - 5), (int)(marginTop + (k + 1) * vertical_size - 2), 14, 8);
							break;
						case 20:
							graph.fillRect((int)(margin_left + param.h_each_size * n * 12 - 5), (int)(marginTop + (k + 1) * vertical_size - 2), 14, 8);
							break;
						default: break;
					}
				}
			}
			for(int k = 0; k < param.v_point; k++){
				if(k % 2 == 0 && k < param.v_point - 1){
					int y_label = y_label_count - 10 * k;
					graph.setFont(new java.awt.Font("宋体", java.awt.Font.PLAIN, 8));
					graph.setColor(Color.BLACK);
					switch (param.speed) {
						case 1: case 2: case 3: case 30:
							graph.drawString(String.valueOf(y_label), margin_left + param.h_each_size * n * 6 - 5 , marginTop + (k + 1) * vertical_size + 3.6f);
							break;
						case 20:
							graph.drawString(String.valueOf(y_label), margin_left + param.h_each_size * n * 12 - 5 , marginTop + (k + 1) * vertical_size + 3.6f);
							break;
						default: break;
					}
				}
			}
		}
	}
	
	/**
	 * 渲染正常区域背景
	 * @param graph
	 */
	protected void randerNormalArea(Graphics2D graph, Integer marginTop){
		int x = margin_left;
		int y = (int)(marginTop + vertical_size * 5);
		int width = (int)(total_width);
		int height = (int)(vertical_size * 5);
		graph.setColor(normal_color);
		graph.fillRect(x, y , width, height);
	}
	
	/**
	 * 渲染胎心曲线值
	 * @param graph
	 */
	protected void randerValue(Graphics2D graph, Integer page, Integer marginTop, DrawParam param){
		int totalPoint = 0;
		if(dataArray == null || dataArray.length < 1){
			return;
		}
		switch (param.speed) {
			case 1: totalPoint = 3240; break;
			case 2: totalPoint = 1620; break;
			case 3: totalPoint = 1080; break;
			case 20: totalPoint = 2400; break;
			case 30: totalPoint = 3600; break;
			default: break;
		}
				
		if(dataArray != null && dataArray.length > 0){
			for(int v = 0; v < dataArray.length - 1; v++){
				/** 两点差值大于30将不计入图表中 **/
				int abs_value = Math.abs(dataArray[v + 1] - dataArray[v]);
				if(abs_value > 30 || dataArray[v] == 0){
					continue;
				}
				int x1 = margin_left + Math.round(total_width / totalPoint * v);
				int y1 = (int) (marginTop + Math.round(210 - dataArray[v]) * vertical_size / 10);
				int x2 = margin_left + Math.round(total_width / totalPoint * (v + 1));
				int y2 = (int) (marginTop + Math.round(210 - dataArray[v + 1]) * vertical_size / 10);
				graph.setStroke(new BasicStroke(0.5f));
				graph.setColor(Color.BLACK);
				graph.drawLine(x1 , y1, x2, y2);
			}
		}
	}
	
	/**
	 * 渲染胎动值
	 * @param graph
	 */
	protected void randerFetalMoveData(Graphics2D graph, Integer page, Integer marginTop, int[] fetalMoveArray, DrawParam param){
		int offTime = Math.round(start / 2);
		int endTime = Math.round(end / 2);
		if(fetalMoveArray != null && fetalMoveArray.length > 0){
			for(int v = 0; v < fetalMoveArray.length; v++){
				int totalTime = 0;
				int x = 0;
				switch (param.speed) {
					case 1: totalTime = 1620; break;
					case 2: totalTime = 810; break;
					case 3: totalTime = 540; break;
					case 20: totalTime = 1200; break;
					case 30: totalTime = 1800; break;
					default: break;
				}
				
				if(fetalMoveArray[v] > (totalTime*(param.page - 1) + offTime) && fetalMoveArray[v] <= (endTime < (totalTime*param.page + offTime) ? endTime : (totalTime*param.page + offTime))){
					x = margin_left + Math.round(total_width / totalTime * (fetalMoveArray[v] - Math.round(start / 2) - totalTime*(param.page - 1)));
				}else if(fetalMoveArray[v] == 0){//如果起始位置有胎动的时候也进行标示
					x = margin_left + Math.round(total_width / totalTime * (fetalMoveArray[v] - Math.round(start / 2) - totalTime*(param.page - 1)));
				}
				if(x >= margin_left){
					int y = (int) (marginTop + vertical_size * param.v_point - 30);
					graph.setColor(black_color);
					graph.drawRect(x, y, 2, 5);
					graph.fillRect(x, y, 2, 5);
				}
			}
		}
	}
	
	/**
	 * 画宫缩X轴
	 * @param graph 画布对象
	 * @param marginTop 绝对定位的上边距
	 */
	protected void drawUterusXLine(Graphics2D graph, Integer marginTop){
		for(int i = 0; i < 11; i++){
			int offset_y = (int) (marginTop + Math.ceil(vertical_size * i));
			/*if(i % 2 == 0){
				graph.setStroke(new BasicStroke(0.5f));
			}else{
				graph.setStroke(new BasicStroke(0.5f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0, new float[]{4, 2}, 0));
			}*/
			graph.setStroke(new BasicStroke(0.4f));
			graph.setColor(light_black_color);
			graph.drawLine(margin_left, offset_y, (int)Math.ceil(total_width + margin_left), offset_y);
		}
	}
	
	/**
	 * 画宫缩Y轴
	 * @param graph
	 * @param marginTop 绝对定位的上边距
	 */
	protected void drawUterusYLine(Graphics2D graph, Integer marginTop, DrawParam param){
		for(int j = 0; j <= param.h_point; j++){
			int offset_x = (int) (margin_left + Math.round(param.h_each_size * j));
			graph.setStroke(new BasicStroke(0.4f));
			graph.drawLine(offset_x, marginTop + 1, offset_x, (int) (marginTop + Math.ceil(vertical_size * (11 - 1)) - 1));
			graph.setColor(light_black_color);
		}
	}
	
	/**
	 * 宫缩Y轴坐标
	 * @param graph
	 * @param marginTop 绝对定位的上边距
	 */
	protected void drawUterusYLabel(Graphics2D graph, Integer marginTop, DrawParam param){
		for(int n = 1; n <= 2; n++){
			for(int k = 0; k < 11; k++){
				if(k % 2 == 0){
					graph.setColor(Color.WHITE);
					switch (param.speed) {
						case 1: case 2: case 3: case 30:
							graph.fillRect((int)(margin_left + param.h_each_size * n * 6 - 5), (int)(marginTop + k * vertical_size - 2), 14, 8);
							break;
						case 20:
							graph.fillRect((int)(margin_left + param.h_each_size * n * 12 - 5), (int)(marginTop + k * vertical_size - 2), 14, 8);
							break;
						default:
							break;
					}
				}
			}
			for(int k = 0; k < 11; k++){
				if(k % 2 == 0){
					int y_label = uterus_count - 10 * k;
					graph.setFont(new java.awt.Font("宋体", java.awt.Font.PLAIN, 8));
					graph.setColor(Color.BLACK);
					switch (param.speed) {
						case 1: case 2: case 3: case 30:
							graph.drawString(String.valueOf(y_label), margin_left + param.h_each_size * n * 6 - 3 , marginTop + k * vertical_size + 3.6f);
							break;
						case 20:
							graph.drawString(String.valueOf(y_label), margin_left + param.h_each_size * n * 12 - 3 , marginTop + k * vertical_size + 3.6f);
							break;
						default:
							break;
					}
				}
			}
		}
	}
	
	/**
	 * 渲染宫缩值
	 * @param graph
	 */
	protected void randerUterusValue(Graphics2D graph, Integer marginTop, DrawParam param){
		int totalPoint = 0;
		if(uterusArray == null || uterusArray.length < 1){
			return;
		}
		switch (param.speed) {
			case 1: totalPoint = 3240; break;
			case 2: totalPoint = 1620; break;
			case 3: totalPoint = 1080; break;
			case 20: totalPoint = 2400; break;
			case 30: totalPoint = 3600; break;
			default: break;
		}
		
		if(uterusArray != null && uterusArray.length > 0){
			for(int v = 0; v < uterusArray.length - 1; v++){
				int x1 = margin_left + Math.round(total_width / totalPoint * v);
				int y1 = (int) (marginTop + Math.round(100 - uterusArray[v]) * vertical_size / 10);
				int x2 = margin_left + Math.round(total_width / totalPoint * (v + 1));
				int y2 = (int) (marginTop + Math.round(100 - uterusArray[v + 1]) * vertical_size / 10);
				graph.setStroke(new BasicStroke(0.5f));
				graph.setColor(Color.BLACK);
				graph.drawLine(x1 , y1, x2, y2);
			}
		}
	}
	
	public class DrawParam{
		
		/** 垂直多少个Cell **/
		private int v_point;
		/** 水平多少个Cell **/
		private int h_point;
		/** 水平每一格Cell的宽度 **/
		private float h_each_size;
		/** 走纸速度 **/
		private int speed;
		/** 页数 **/
		private int page;
		
		public DrawParam() {
			
		}
		public DrawParam(int v_point, int h_point, float h_each_size, int speed, int page) {
			this.v_point = v_point;
			this.h_point = h_point;
			this.h_each_size = h_each_size;
			this.speed = speed;
			this.page = page;
		}

		public int getV_point() {
			return v_point;
		}
		public void setV_point(int v_point) {
			this.v_point = v_point;
		}
		public int getH_point() {
			return h_point;
		}
		public void setH_point(int h_point) {
			this.h_point = h_point;
		}
		public float getH_each_size() {
			return h_each_size;
		}
		public void setH_each_size(float h_each_size) {
			this.h_each_size = h_each_size;
		}
		public int getSpeed() {
			return speed;
		}
		public void setSpeed(int speed) {
			this.speed = speed;
		}
		public int getPage() {
			return page;
		}
		public void setPage(int page) {
			this.page = page;
		}
		
	}
	
}
